local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local CoreGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer

local function cleanUpExistingOrbsAndLasers()
    for _, part in pairs(Workspace:GetChildren()) do
        if part.Name == "Lock" or part.Name == "RedLaser" or part.Name == "RedLaser1" then
            part:Destroy()
        end
    end
end

local function spawnOrbAtPlayer(targetPlayer)
    cleanUpExistingOrbsAndLasers()

    local character = targetPlayer.Character
    if not character then
        warn("Target player has no character")
        return
    end

    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then
        warn("Target player's character does not have a HumanoidRootPart")
        return
    end

    local targetPosition = hrp.Position

    local targetORB = Instance.new("Part")
    targetORB.Parent = Workspace
    targetORB.Size = Vector3.new(0.01, 0.01, 0.01)
    targetORB.Position = targetPosition
    targetORB.Color = Color3.fromRGB(255, 0, 0)
    targetORB.Shape = Enum.PartType.Ball
    targetORB.Anchored = true
    targetORB.CanCollide = false
    targetORB.Name = "Lock"

    CoreGui:SetCore("SendNotification", {
        Title = "Target Locked",
        Text = "Target Orb has been placed!",
        Duration = 2,
    })

    wait(4)

    local function getRandomOffsetPosition(basePosition, range)
        local offsetX = math.random(-range, range)
        local offsetZ = math.random(-range, range)
        return basePosition + Vector3.new(offsetX, 0, offsetZ)
    end

    local RedLaser = Instance.new("Part")
    RedLaser.Parent = Workspace
    RedLaser.Size = Vector3.new(0.05, 999, 0.05)
    RedLaser.Anchored = true
    RedLaser.CanCollide = false
    RedLaser.Color = Color3.fromRGB(255, 0, 0)
    RedLaser.Material = Enum.Material.Neon
    RedLaser.CFrame = CFrame.new(getRandomOffsetPosition(targetPosition, 50) + Vector3.new(0, 900, 0)) * CFrame.Angles(0, math.rad(90), 0)
    RedLaser.Name = "RedLaser"

    local RedLaser1 = Instance.new("Part")
    RedLaser1.Parent = Workspace
    RedLaser1.Size = Vector3.new(0.05, 999, 0.05)
    RedLaser1.Anchored = true
    RedLaser1.CanCollide = false
    RedLaser1.Color = Color3.fromRGB(0, 0, 200)
    RedLaser1.Material = Enum.Material.Neon
    RedLaser1.CFrame = CFrame.new(getRandomOffsetPosition(targetPosition, 50) + Vector3.new(0, 900, 0)) * CFrame.Angles(0, math.rad(90), 0)
    RedLaser1.Name = "RedLaser1"

    local fadeInInfo = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In)
    local fadeInGoalRedLaser = {Transparency = 0}
    local fadeInGoalRedLaser1 = {Transparency = 0}

    local rotationSpeedLeft = math.rad(15)
    local rotationSpeedRight = math.rad(15)

    local function rotatePart(part, speed)
        while part.Parent do
            part.CFrame = part.CFrame * CFrame.Angles(0, speed, 0)
            wait(0.05)
        end
    end

    spawn(function() rotatePart(RedLaser, rotationSpeedLeft) end)
    spawn(function() rotatePart(RedLaser1, -rotationSpeedRight) end)

    local tweenFadeInRedLaser = TweenService:Create(RedLaser, fadeInInfo, fadeInGoalRedLaser)
    tweenFadeInRedLaser:Play()

    wait(0.2)

    local tweenFadeInRedLaser1 = TweenService:Create(RedLaser1, fadeInInfo, fadeInGoalRedLaser1)
    tweenFadeInRedLaser1:Play()

    local tweenInfoPosition = TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local goalPosition = { CFrame = CFrame.new(targetPosition + Vector3.new(0, 4, 0)) * CFrame.Angles(0, math.rad(90), 0) }
    local tweenPosition = TweenService:Create(RedLaser, tweenInfoPosition, goalPosition)
    tweenPosition:Play()

    tweenPosition.Completed:Wait()

    local tweenInfoSizeColor = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local goalSizeColor = {
        Size = Vector3.new(40, RedLaser.Size.Y, 40),
        Transparency = 1,
        Color = Color3.fromRGB(255, 165, 0)
    }
    local tweenSizeColor = TweenService:Create(RedLaser, tweenInfoSizeColor, goalSizeColor)
    tweenSizeColor:Play()

    local tweenInfoPosition1 = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local goalPosition1 = { CFrame = CFrame.new(targetPosition + Vector3.new(0, 4, 0)) * CFrame.Angles(0, math.rad(90), 0) }
    local tweenPosition1 = TweenService:Create(RedLaser1, tweenInfoPosition1, goalPosition1)
    tweenPosition1:Play()

    tweenPosition1.Completed:Wait()

    local tweenInfoSizeColor1 = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local goalSizeColor1 = {
        Size = Vector3.new(30, RedLaser1.Size.Y, 30),
        Transparency = 0.99,
        Color = Color3.fromRGB(255, 255, 255)
    }
    local tweenSizeColor1 = TweenService:Create(RedLaser1, tweenInfoSizeColor1, goalSizeColor1)
    tweenSizeColor1:Play()

    wait(0.05)

    player.Character.HumanoidRootPart.CFrame = targetORB.CFrame

    local fadeInInfo = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In)
    local fadeInGoalRedLaser = {Transparency = 0.99}
    local fadeInGoalRedLaser1 = {Transparency = 0.99}

    spawn(function() rotatePart(RedLaser, rotationSpeedLeft) end)
    spawn(function() rotatePart(RedLaser1, -rotationSpeedRight) end)

    local tweenFadeInRedLaser = TweenService:Create(RedLaser, fadeInInfo, fadeInGoalRedLaser)
    tweenFadeInRedLaser:Play()

    wait(0.2)

    local tweenFadeInRedLaser1 = TweenService:Create(RedLaser1, fadeInInfo, fadeInGoalRedLaser1)
    tweenFadeInRedLaser1:Play()

    local tweenInfoPosition = TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local goalPosition = { CFrame = CFrame.new(targetPosition + Vector3.new(0, 4, 0)) * CFrame.Angles(0, math.rad(90), 0) }
    local tweenPosition = TweenService:Create(RedLaser, tweenInfoPosition, goalPosition)
    tweenPosition:Play()

    tweenPosition.Completed:Wait()

    local tweenInfoSizeColor = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local goalSizeColor = {
        Size = Vector3.new(0.05, RedLaser.Size.Y, 0.05),
        Transparency = 1,
        Color = Color3.fromRGB(255, 165, 0)
    }
    local tweenSizeColor = TweenService:Create(RedLaser, tweenInfoSizeColor, goalSizeColor)
    tweenSizeColor:Play()

    local tweenInfoPosition1 = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local goalPosition1 = { CFrame = CFrame.new(targetPosition + Vector3.new(0, 4, 0)) * CFrame.Angles(0, math.rad(90), 0) }
    local tweenPosition1 = TweenService:Create(RedLaser1, tweenInfoPosition1, goalPosition1)
    tweenPosition1:Play()

    tweenPosition1.Completed:Wait()

    local tweenInfoSizeColor1 = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local goalSizeColor1 = {
        Size = Vector3.new(0.01, RedLaser1.Size.Y, 0.01),
        Transparency = 1,
        Color = Color3.fromRGB(255, 255, 255)
    }
    local tweenSizeColor1 = TweenService:Create(RedLaser1, tweenInfoSizeColor1, goalSizeColor1)
    tweenSizeColor1:Play()

    wait(0.2)

    RedLaser:Destroy()
    RedLaser1:Destroy()
    targetORB:Destroy()
end

local function onPlayerChatted(message)
    local words = string.split(message, " ")
    
    if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")

        if words[1] == "+r" then
            humanoid.Health = 0
        elseif words[1] == "+s" then
            humanoid.WalkSpeed = 200
        elseif words[1] == "+uns" then
            humanoid.WalkSpeed = 26
        elseif words[1] == "+ts" and words[2] then
            local targetPlayer = Players:FindFirstChild(words[2])
            if targetPlayer then
                spawnOrbAtPlayer(targetPlayer)
            else
                CoreGui:SetCore("SendNotification", {
                    Title = "Error",
                    Text = "Player not found.",
                    Duration = 2,
                })
            end
        end
    end
end

player.Chatted:Connect(onPlayerChatted)
